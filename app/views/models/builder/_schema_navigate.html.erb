<script type="text/javascript"><!--
			// borrowed and adapted from SVG Web
			// (we should use the same feature validation system to avoid being left out whenever SVG web does its checking)
			var hasNativeSVG = function(){
				if(document.implementation && document.implementation.hasFeature){
					return document.implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#BasicStructure', '1.1');
				}else{
					return false;
				}
			};

			var hasPluginSVG = function(){
				// THINK: add support for other known plug-ins?
				// (these are the ones which seem to properly implement the required APIs)
				var pluginWhitelist = ["Adobe.SVGCtl", "RenesisX.RenesisCtrl"];
				for(var i = 0; i < pluginWhitelist.length; i++){
					try{
						// plug-in detection
						// http://support.adobe.com/devsup/devsup.nsf/docs/51780.htm
						// http://osdir.com/ml/text.xml.svg.devel/2002-08/msg01297.html
						var SVGControl = new ActiveXObject(pluginWhitelist[i]);
						if(!SVGControl){
							throw("SVG plug-in not installed");
						}
						return true;
					}catch(e){
						// do nothing
					}
				}
				// no supported SVG plug-in was found
				return false;
			};

			// SVG Web requires including the library in order to work, though it seems to mess with plug-ins such as ASV and native renderers, even when inactive; possibly related to issue 101
			// http://code.google.com/p/svgweb/issues/detail?id=101
			// (currently, the trick is to only include the library whenever a native implementation or a plug-in are not detected)
			if(!(hasNativeSVG() || hasPluginSVG())){
				// NOTE: the common but ugly document.write hack is used, should be temporary...
				// (will likely be replaced with a DOM approach)
				// http://www.faqts.com/knowledge_base/view.phtml/aid/841
				document.write('<scr' + 'ipt type="text/javascript" src="svgweb/src/svg.js" data-path="svgweb/src"></scr' + 'ipt>');
			}
		//--></script>

<script type="text/javascript"><!--
			// global variable(s);
			var svgObj;

			var checkSVGLoad = function(){
				svgObj = document.getElementById("svgObj") || document.getElementById("flashObj");
				if(svgObj){
					var svgDoc = fetchSVGDocument(svgObj);
					if(svgDoc && svgDoc.documentElement){
						updateGUIElements();
						return;
					}
				}
				// for some reason, we're not ready yet
				// THINK: give up after a while?
				// (i.e., don't pool for the SVG load state forever in case it's impossible: for example, no SVG plug-in and no flash support on IE)
				// (on the other hand, if we have really complex content to render, it might take longer to become available than a predefined timeout)
				setTimeout(checkSVGLoad, 200);
			}

			// setup initial call
			window.onload = checkSVGLoad;

			var updateGUIElements = function(){
				var svgDoc = fetchSVGDocument(svgObj);
				if(svgDoc){
					// check for availability of the required DOM APIs
					if(typeof(svgDoc.documentElement.currentScale) != "undefined"){
						setZoomInteractors(true);
						// at least one interactor is enabled
						setResetAll(true);
					}
					if(typeof(svgDoc.documentElement.currentTranslate) != "undefined"){
						setPanInteractors(true);
						// at least one interactor is enabled
						setResetAll(true);
					}
					if(typeof(svgDoc.documentElement.currentRotate) != "undefined"){
						setRotateInteractors(true);
						// at least one interactor is enabled
						setResetAll(true);
					}
				}
			};

			var setZoomInteractors = function(toEnable){
				setElements(["zoomin", "zoomout", "resetzoom"], toEnable);
			};
			var setPanInteractors = function(toEnable){
				setElements(["panleft", "panup", "panright", "pandown", "resetpan"], toEnable);
			};
			var setRotateInteractors = function(toEnable){
				setElements(["rotatecw", "rotateccw", "resetrotation"], toEnable);
			};
			var setResetAll = function(toEnable){
				setElements(["resetall"], toEnable);
			};
			var setElements = function(eleArray, toEnable){
				for(var i = 0; i < eleArray.length; i++){
					var ele = document.getElementById(eleArray[i]);
					if(ele){
						ele.disabled = !toEnable;
					}
				}
			};

			var fetchSVGDocument = function(containerElement){
				if(!containerElement){
					// no need to proceed if there's no container element
					return null;
				}
				// NOTE: weird behavior in Webkit: if one gets contentDocument while the SVG object is still being loaded, it seems that the SVG container document will actually hold an HTML document?!
				// (when used together with window and/or object onload events, as if the are being triggered before the SVG document is really ready, which feels like buggy...)
				// (it's like crawling though contentDocument exposes a unstable, still-being-parsed subtree)
				// TODO: find out whether this is an issue or a "feature"
				// NOTE: using getSVGDocument to fetch the document instead seems to workaround the issue
				try{
					// Rendering engines: Webkit (Safari, Chrome), Trident (Internet Explorer) with ASV and Renesis
					return containerElement.getSVGDocument();
				}catch(e){
					if(typeof(containerElement.contentDocument) != "undefined"){
						// Rendering engines: Gecko (Firefox), Presto (Opera), SVG Web
						// (Webkit (Safari, Chrome) is buggy regarding this, getSVGDocument seems more reliable)
						return containerElement.contentDocument;
					}
					return null;
				}
			};

			/**
			 * Zooms the document
			 * NOTE: due to (older) implementation issues, it's advised that it doesn't contain a large number of decimal cases.
			 * (see http://heldermagalhaes.com/stuff/svg/demos/ZoomAndPan-Demo.svg )
			 *
			 * @param magnitude zoom multiplier: above 1 for zoom in, below 1 for zoom out.
			 * @param isAbsolute if the input value is to be considered relative or absolute: can be ommitted when relative.
			 */


			var zoom = function(magnitude, isAbsolute){
				// NOTE: we fetch the interface everytime as the document may change between interactions
				// (the SVG may contain links to other SVG documents, for example)
				var svgDoc = fetchSVGDocument(svgObj);
				if(svgDoc && svgDoc.documentElement){
					if(isAbsolute){
						svgDoc.documentElement.currentScale = magnitude;
					}else{
						svgDoc.documentElement.currentScale *= magnitude;
					}
				}else{
					alert("Error occurred while zooming!");
					setZoomInteractors(false);
				}
			};

			/**
			 * Pans the document
			 *
			 * @param x horizontal coordinate shift: negative for left, positive for right.
			 * @param y vertical coordinate shift: negative for up, positive for down.
			 * @param isAbsolute if the input value is to be considered relative or absolute: can be ommitted when relative.
			 */
			var pan = function(x, y, isAbsolute){
				// NOTE: we fetch the interface every time as the document may change between interactions
				// (the SVG may contain links to other SVG documents, for example)
				var svgDoc = fetchSVGDocument(svgObj);
				if(svgDoc && svgDoc.documentElement){
					if(isAbsolute){
						if(typeof(svgDoc.documentElement.currentTranslate.setX) != "undefined"){
							// accomodate for SVG Web, which currently doesn't support the standard way to set the attribute
							// http://svgweb.googlecode.com/svn/trunk/docs/UserManual.html#known_issues25
							svgDoc.documentElement.currentTranslate.setX(x);
						}else{
							svgDoc.documentElement.currentTranslate.x = x;
						}
						if(typeof(svgDoc.documentElement.currentTranslate.setY) != "undefined"){
							// accomodate for SVG Web, which currently doesn't support the standard way to set the attribute
							// http://svgweb.googlecode.com/svn/trunk/docs/UserManual.html#known_issues25
							svgDoc.documentElement.currentTranslate.setY(y);
						}else{
							svgDoc.documentElement.currentTranslate.y = y;
						}
					}else{
						if(typeof(svgDoc.documentElement.currentTranslate.setX) != "undefined"){
							// accomodate for SVG Web, which currently doesn't support the standard way to set the attribute
							// http://svgweb.googlecode.com/svn/trunk/docs/UserManual.html#known_issues25
							svgDoc.documentElement.currentTranslate.setX(svgDoc.documentElement.currentTranslate.x + x);
						}else{
							svgDoc.documentElement.currentTranslate.x += x;
						}
						if(typeof(svgDoc.documentElement.currentTranslate.setY) != "undefined"){
							// accomodate for SVG Web, which currently doesn't support the standard way to set the attribute
							// http://svgweb.googlecode.com/svn/trunk/docs/UserManual.html#known_issues25
							svgDoc.documentElement.currentTranslate.setY(svgDoc.documentElement.currentTranslate.y + y);
						}else{
							svgDoc.documentElement.currentTranslate.y += y;
						}
					}
				}else{
					alert("Error occurred while panning!");
					setPanInteractors(false);
				}
			};

			/**
			 * Rotates the document
			 * NOTE: as this was introduced in SVG Tiny 1.2, it's (currently) little supported.
			 *
			 * @param angle rotation angle, in degrees: positive for clockwise, negative for counter-clockwise
			 * @param isAbsolute if the input value is to be considered relative or absolute: can be ommitted when relative.
			 */
			var rotate = function(angle, isAbsolute){
				// NOTE: we fetch the interface everytime as the document may change between interactions
				// (the SVG may contain links to other SVG documents, for example)
				var svgDoc = fetchSVGDocument(svgObj);
				if(svgDoc && svgDoc.documentElement){
					if(isAbsolute){
						svgDoc.documentElement.currentRotate = angle;
					}else{
						svgDoc.documentElement.currentRotate += angle;
					}
				}else{
					alert("Error occurred while rotating!");
					setRotateInteractors(false);
				}
			};
		//--></script>

<script type="text/javascript">
  var zoomLevel = 1;
</script>

<table>
  <thead>
  <tr>
    <th>Zoom</th>
    <th>Move</th>
  </tr>
  </thead>
  <tbody>
  <tr>
    <td>
<span title="Zoom">
<input id="zoomin" type="button" value="+" title="Zoom in" onclick="zoom(1.25);zoomLevel=zoomLevel*1.25">
<input id="zoomout" type="button" value="-" title="Zoom out" onclick="zoom(0.75);zoomLevel=zoomLevel*0.75">
</span>
    </td>
    <td>
      <!-- Yeah yeah, I know styling with tables is ugly... ;-) -->
      <table title="Move">
        <tbody>
        <tr>
          <td rowspan="3" valign="middle" class="layout">
            <input id="panleft" type="button" value="←" title="Pan left" onclick="pan(30/zoomLevel, 0)">
          </td>
          <td class="layout">
            <input id="panup" type="button" value="↑" title="Pan up" onclick="pan(0, 30/zoomLevel)">
          </td>
          <td rowspan="3" valign="middle" class="layout">
            <input id="panright" type="button" value="→" title="Pan right" onclick="pan(-30/zoomLevel, 0)">
          </td>
        </tr>
        <tr></tr>
        <tr>
          <td class="layout">
            <input id="pandown" type="button" value="↓" title="Pan down" onclick="pan(0, -30/zoomLevel)">
          </td>
        </tr>
        </tbody>
      </table>
    </td>

  </tr>
  </tbody>
</table>